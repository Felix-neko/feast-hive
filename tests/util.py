from datetime import timedelta
from enum import Enum

from pytz import FixedOffset, timezone, utc
import pandas as pd
import numpy as np

_DEFAULT_ENTITY_DF_EVENT_TIMESTAMP_COL = "event_timestamp"


class EventTimestampType(Enum):
    TZ_NAIVE = 0
    TZ_AWARE_UTC = 1
    TZ_AWARE_FIXED_OFFSET = 2
    TZ_AWARE_US_PACIFIC = 3


def _convert_event_timestamp(event_timestamp: pd.Timestamp, t: EventTimestampType):
    if t == EventTimestampType.TZ_NAIVE:
        return event_timestamp
    elif t == EventTimestampType.TZ_AWARE_UTC:
        return event_timestamp.replace(tzinfo=utc)
    elif t == EventTimestampType.TZ_AWARE_FIXED_OFFSET:
        return event_timestamp.replace(tzinfo=utc).astimezone(FixedOffset(60))
    elif t == EventTimestampType.TZ_AWARE_US_PACIFIC:
        return event_timestamp.replace(tzinfo=utc).astimezone(timezone("US/Pacific"))


def create_orders_df(
    customers,
    drivers,
    start_date,
    end_date,
    order_count,
    infer_event_timestamp_col=False,
) -> pd.DataFrame:
    """
    Example df generated by this function:

    | order_id | driver_id | customer_id | order_is_success |    event_timestamp  |
    +----------+-----------+-------------+------------------+---------------------+
    |      100 |      5004 |        1007 |                0 | 2021-03-10 19:31:15 |
    |      101 |      5003 |        1006 |                0 | 2021-03-11 22:02:50 |
    |      102 |      5010 |        1005 |                0 | 2021-03-13 00:34:24 |
    |      103 |      5010 |        1001 |                1 | 2021-03-14 03:05:59 |
    """
    df = pd.DataFrame()
    df["order_id"] = [order_id for order_id in range(100, 100 + order_count)]
    df["driver_id"] = np.random.choice(drivers, order_count)
    df["customer_id"] = np.random.choice(customers, order_count)
    df["order_is_success"] = np.random.randint(0, 2, size=order_count).astype(np.int32)

    if infer_event_timestamp_col:
        df["e_ts"] = [
            _convert_event_timestamp(
                pd.Timestamp(dt, unit="ms", tz="UTC").round("ms"),
                EventTimestampType(3),
            )
            for idx, dt in enumerate(
                pd.date_range(start=start_date, end=end_date, periods=order_count)
            )
        ]
        df.sort_values(
            by=["e_ts", "order_id", "driver_id", "customer_id"], inplace=True,
        )
    else:
        df[_DEFAULT_ENTITY_DF_EVENT_TIMESTAMP_COL] = [
            _convert_event_timestamp(
                pd.Timestamp(dt, unit="ms", tz="UTC").round("ms"),
                EventTimestampType(idx % 4),
            )
            for idx, dt in enumerate(
                pd.date_range(start=start_date, end=end_date, periods=order_count)
            )
        ]
        df.sort_values(
            by=[
                _DEFAULT_ENTITY_DF_EVENT_TIMESTAMP_COL,
                "order_id",
                "driver_id",
                "customer_id",
            ],
            inplace=True,
        )
    return df


def generate_entities(date, infer_event_timestamp_col, order_count: int = 1000):
    end_date = date
    before_start_date = end_date - timedelta(days=365)
    start_date = end_date - timedelta(days=7)
    after_end_date = end_date + timedelta(days=365)
    customer_entities = list(range(1001, 1110))
    driver_entities = list(range(5001, 5110))
    orders_df = create_orders_df(
        customers=customer_entities,
        drivers=driver_entities,
        start_date=before_start_date,
        end_date=after_end_date,
        order_count=order_count,
        infer_event_timestamp_col=infer_event_timestamp_col,
    )
    return customer_entities, driver_entities, end_date, orders_df, start_date
